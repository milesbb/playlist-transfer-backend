AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CI/CD Pipeline for TypeScript Node.js Express Lambda Playlist Transfer Backend

Globals:
  Function:
    Runtime: nodejs20.x
    Handler: index.handler
    Timeout: 15
    MemorySize: 256

Parameters:
  GitHubToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: github-oauth-token

Resources:
  PlaylistTransferArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'playlist-transfer-artifact-bucket'
      VersioningConfiguration:
        Status: Enabled
      # Tags:
      #   - Key: project
      #     Value: playlist-transfer

  PlaylistTransferApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PlaylistTransferApiFunction
      CodeUri: s3://playlist-transfer-artifact-bucket/function.zip
      CodeUri: s3://playlist-transfer-artifact-bucket/function.zip
      # CodeUri: application.zip
      Role: !GetAtt PlaylistTransferLambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          NODE_ENV: production
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      # Tags:
      #   project: playlist-transfer

  PlaylistTransferLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-PlaylistTransferLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  PlaylistTransferCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-PlaylistTransferCodeBuildRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess

  PlaylistTransferBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-CodeBuild'
      ServiceRole: !GetAtt PlaylistTransferCodeBuildRole.Arn
      Artifacts:
        Type: S3
        Location: !Ref PlaylistTransferArtifactBucket
        Packaging: ZIP
        Path: build
        Name: function.zip
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: false
      Source:
        Type: GITHUB
        Location: https://github.com/milesbb/playlist-transfer-backend.git
        BuildSpec: buildspec.yml
      # Tags:
      #   project: playlist-transfer

  PlaylistTransferCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-PlaylistTransferCodePipelineRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess

  PlaylistTransferPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-Pipeline'
      RoleArn: !GetAtt PlaylistTransferCodePipelineRole.Arn
      # Tags:
      #   - Key: project
      #     Value: playlist-transfer
      ArtifactStore:
        Type: S3
        Location: !Ref PlaylistTransferArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: milesbb
                Repo: playlist-transfer-backend
                Branch: main
                OAuthToken: !Ref GitHubToken
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref PlaylistTransferBuildProject
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                RoleArn: !GetAtt PlaylistTransferCodePipelineRole.Arn
                ChangeSetName: !Sub '${AWS::StackName}-Changeset'
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub '${AWS::StackName}'
                TemplatePath: BuildOutput::output-template.yml
                Capabilities: CAPABILITY_NAMED_IAM
              RunOrder: 1
            - Name: DeployChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ChangeSetName: !Sub '${AWS::StackName}-Changeset'
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub '${AWS::StackName}'
              RunOrder: 2
